@using PaycorTest.WebClient.Models
@inject IJSRuntime JSRuntime

    <div class="row">
        <div class="col text-center">
            <input type="date" class="write-notify" @bind="SearchStartDate" @bind:event="onchange"
                   style="border-radius:0.3rem; border-color:black;padding:2px;min-width:50px;max-width:135px;font-size:small; margin-right:0px;" />
            <input type="date" class="write-notify" @bind="SearchEndDate" @bind:event="onchange"
                   style="border-radius:0.3rem; border-color:black;padding:2px;min-width:50px;max-width:135px;font-size:small;margin-right:0px;" />
            <span class="badge badge-secondary clear-selection" style="cursor:pointer;" @onclick="@(() => { SearchEndDate = null; SearchStartDate = null; })">x</span>
            @if (AllowSorting)
            {
                <span class="oi oi-sort-ascending click-notify" style="vertical-align:middle;" @onclick="@(() => Sorting = true)"></span>
                <span class="oi oi-sort-descending click-notify" style="vertical-align:middle;" @onclick="@(() => Sorting = false)"></span>
            }
        </div>

    </div>

@code {

    [Parameter] public bool AllowSorting { get; set; }

    private DateTime? _searchStartDate = null;
    private DateTime? _searchEndDate = null;

    [Parameter]
    public DateTime? SearchStartDate
    {
        get
        {
            return _searchStartDate;
        }
        set
        {
            if (value != _searchStartDate)
            {
                _searchStartDate = value;

                if (RangeSelected.HasDelegate)
                {
                    if (_searchStartDate.HasValue && _searchEndDate.HasValue)
                    {
                        if (_searchStartDate > _searchEndDate)
                        {
                            _searchEndDate = _searchStartDate;
                        }
                    }

                    DateRangeSelection dateRange = new DateRangeSelection()
                    {
                        Start = _searchStartDate,
                        End = _searchEndDate
                    };

                    RangeSelected.InvokeAsync(dateRange).GetAwaiter().GetResult();
                }
            }
        }
    }

    [Parameter]
    public DateTime? SearchEndDate
    {
        get
        {
            return _searchEndDate;
        }
        set
        {
            if (value != _searchEndDate)
            {
                _searchEndDate = value;

                if (RangeSelected.HasDelegate)
                {
                    if (_searchStartDate.HasValue && _searchEndDate.HasValue)
                    {
                        if (_searchStartDate > _searchEndDate)
                        {
                            _searchEndDate = _searchStartDate;
                        }
                    }

                    DateRangeSelection dateRange = new DateRangeSelection()
                    {
                        Start = _searchStartDate,
                        End = _searchEndDate
                    };

                    RangeSelected.InvokeAsync(dateRange).GetAwaiter().GetResult();
                }
            }
        }
    }

    private bool? _sorting = null;
    private bool? Sorting
    {
        get { return _sorting; }
        set
        {
            _sorting = value;
            if (OnSortingChanged.HasDelegate)
            {
                OnSortingChanged.InvokeAsync(_sorting);
            }
        }
    }

    [Parameter] public EventCallback<DateRangeSelection> RangeSelected { get; set; }
    /// <summary>
    /// Returns null if no sorting should be done, true - ascending, false -  descending
    /// </summary>
    [Parameter] public EventCallback<bool?> OnSortingChanged { get; set; }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    await JSRuntime.InvokeAsync<object>("highlightInterop.highlight");
    //    await base.OnAfterRenderAsync(firstRender);
    //}
}
